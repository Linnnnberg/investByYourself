#!/usr/bin/env python3
"""
Team Environment Setup Script
Tech-008: Database Infrastructure Setup

This script helps team members set up their local environment securely
without sharing credentials. It provides interactive setup and validation.
"""

import getpass
import logging
import os
import sys
from pathlib import Path

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def check_env_file():
    """Check if .env file exists and is properly configured."""
    env_file = Path(".env")

    if not env_file.exists():
        logger.warning("‚ö†Ô∏è  .env file not found")
        return False

    # Check if .env is in .gitignore
    gitignore_file = Path(".gitignore")
    if gitignore_file.exists():
        with open(gitignore_file, "r") as f:
            if ".env" in f.read():
                logger.info("‚úÖ .env file is properly ignored in .gitignore")
            else:
                logger.warning("‚ö†Ô∏è  .env file should be added to .gitignore")

    return True


def create_env_from_template():
    """Create .env file from template with interactive input."""
    template_file = Path("env.template")
    env_file = Path(".env")

    if not template_file.exists():
        logger.error("‚ùå env.template not found")
        return False

    if env_file.exists():
        logger.info("üìÅ .env file already exists")
        return True

    logger.info("üöÄ Creating .env file from template...")
    logger.info("üí° You'll be prompted for your local database credentials")

    # Read template
    with open(template_file, "r") as f:
        template_content = f.read()

    # Interactive configuration
    config = {}

    print("\n" + "=" * 60)
    print("üîß LOCAL ENVIRONMENT SETUP")
    print("=" * 60)

    # Database settings
    print("\nüìä DATABASE CONFIGURATION")
    print("-" * 30)

    config["POSTGRES_HOST"] = (
        input("PostgreSQL Host [localhost]: ").strip() or "localhost"
    )
    config["POSTGRES_PORT"] = input("PostgreSQL Port [5432]: ").strip() or "5432"
    config["POSTGRES_DATABASE"] = (
        input("Database Name [investbyyourself]: ").strip() or "investbyyourself"
    )
    config["POSTGRES_USER"] = input("Database User [postgres]: ").strip() or "postgres"

    # Secure password input
    while True:
        password = getpass.getpass("Database Password: ")
        if password:
            config["POSTGRES_PASSWORD"] = password
            break
        else:
            print("‚ùå Password cannot be empty")

    # Optional services
    print("\nüîß OPTIONAL SERVICES (press Enter to skip)")
    print("-" * 40)

    redis_host = input("Redis Host [localhost]: ").strip()
    if redis_host:
        config["REDIS_HOST"] = redis_host
        config["REDIS_PORT"] = input("Redis Port [6379]: ").strip() or "6379"
        config["REDIS_PASSWORD"] = getpass.getpass("Redis Password (optional): ") or ""

    minio_host = input("MinIO Host [localhost]: ").strip()
    if minio_host:
        config["MINIO_HOST"] = minio_host
        config["MINIO_PORT"] = input("MinIO Port [9000]: ").strip() or "9000"
        config["MINIO_ACCESS_KEY"] = (
            input("MinIO Access Key: ").strip() or ""
        )
        config["MINIO_SECRET_KEY"] = (
            getpass.getpass("MinIO Secret Key: ") or ""
        )

    # API Keys (optional)
    print("\nüîë API KEYS (press Enter to skip)")
    print("-" * 25)

    fred_key = input("FRED API Key: ").strip()
    if fred_key:
        config["FRED_API_KEY"] = fred_key

    alpha_vantage_key = input("Alpha Vantage API Key: ").strip()
    if alpha_vantage_key:
        config["ALPHA_VANTAGE_API_KEY"] = alpha_vantage_key

    fmp_key = input("Financial Modeling Prep API Key: ").strip()
    if fmp_key:
        config["FMP_API_KEY"] = fmp_key

    # Environment settings
    print("\n‚öôÔ∏è  ENVIRONMENT SETTINGS")
    print("-" * 30)

    config["ENVIRONMENT"] = (
        input("Environment [development]: ").strip() or "development"
    )
    config["DEBUG"] = input("Debug Mode [true]: ").strip() or "true"

    # Generate .env content
    env_content = generate_env_content(config)

    # Write .env file
    with open(env_file, "w") as f:
        f.write(env_content)

    logger.info("‚úÖ .env file created successfully!")
    return True


def generate_env_content(config):
    """Generate .env file content from configuration."""
    env_content = f"""# =====================================================
# InvestByYourself Environment Configuration
# Generated by setup_team_environment.py
# =====================================================

# Database Configuration
# ---------------------

# PostgreSQL Database
POSTGRES_HOST={config['POSTGRES_HOST']}
POSTGRES_PORT={config['POSTGRES_PORT']}
POSTGRES_DATABASE={config['POSTGRES_DATABASE']}
POSTGRES_USER={config['POSTGRES_USER']}
POSTGRES_PASSWORD={config['POSTGRES_PASSWORD']}

# Redis Cache
REDIS_HOST={config.get('REDIS_HOST', 'localhost')}
REDIS_PORT={config.get('REDIS_PORT', '6379')}
REDIS_DB=0
REDIS_PASSWORD={config.get('REDIS_PASSWORD', '')}

# MinIO Object Storage
MINIO_HOST={config.get('MINIO_HOST', 'localhost')}
MINIO_PORT={config.get('MINIO_PORT', '9000')}
MINIO_ACCESS_KEY={config.get('MINIO_ACCESS_KEY', '')}
MINIO_SECRET_KEY={config.get('MINIO_SECRET_KEY', '')}
MINIO_SECURE=false

# API Keys
# --------

# FRED API (Federal Reserve Economic Data)
FRED_API_KEY={config.get('FRED_API_KEY', 'your_fred_api_key_here')}

# Alpha Vantage API
ALPHA_VANTAGE_API_KEY={config.get('ALPHA_VANTAGE_API_KEY', 'your_alpha_vantage_key_here')}

# Financial Modeling Prep API
FMP_API_KEY={config.get('FMP_API_KEY', 'your_fmp_api_key_here')}

# Yahoo Finance (no API key required, but rate limiting applies)
YFINANCE_RATE_LIMIT=1000

# Application Configuration
# ------------------------

# Environment
ENVIRONMENT={config['ENVIRONMENT']}
DEBUG={config['DEBUG']}
LOG_LEVEL=INFO

# Data Collection Settings
DATA_COLLECTION_INTERVAL=900  # 15 minutes in seconds
BATCH_SIZE=100
MAX_RETRIES=3
RETRY_DELAY=5

# Performance Settings
MAX_CONNECTIONS=20
CONNECTION_TIMEOUT=30
QUERY_TIMEOUT=60

# Security Settings
ENCRYPTION_KEY=your_32_character_encryption_key_here
JWT_SECRET=your_jwt_secret_key_here

# Monitoring & Logging
# --------------------

# Sentry (Error Tracking)
SENTRY_DSN=your_sentry_dsn_here

# Prometheus (Metrics)
PROMETHEUS_PORT=8000

# Logging
LOG_FILE_PATH=logs/
LOG_MAX_SIZE=100MB
LOG_BACKUP_COUNT=5

# Development Settings
# -------------------

# Auto-reload
AUTO_RELOAD=true

# Test Database
TEST_POSTGRES_DATABASE=investbyyourself_test
TEST_REDIS_DB=1

# Sample Data
LOAD_SAMPLE_DATA=true
SAMPLE_DATA_SIZE=1000

# =====================================================
# Instructions:
# 1. This file was generated automatically
# 2. Never commit this file to version control
# 3. Keep your credentials secure
# 4. Update this file if your configuration changes
"""

    return env_content


def validate_environment():
    """Validate the environment configuration."""
    logger.info("üîç Validating environment configuration...")

    try:
        from config.database import DatabaseConfig, DatabaseManager

        # Test database connection
        db_manager = DatabaseManager(DatabaseConfig.from_env())

        with db_manager.get_db_session() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT 1")
                logger.info("‚úÖ Database connection successful!")

                # Check if database exists and has tables
                cur.execute(
                    """
                    SELECT table_name
                    FROM information_schema.tables
                    WHERE table_schema = 'public'
                """
                )
                tables = cur.fetchall()

                if tables:
                    logger.info(f"‚úÖ Database has {len(tables)} tables")
                else:
                    logger.info("‚ÑπÔ∏è  Database is empty (this is normal for new setup)")

                return True

    except Exception as e:
        logger.error(f"‚ùå Environment validation failed: {e}")
        return False


def main():
    """Main setup function."""
    logger.info("üöÄ Team Environment Setup Script")
    logger.info("=" * 50)

    # Step 1: Check current .env status
    env_exists = check_env_file()

    if not env_exists:
        # Step 2: Create .env file
        if not create_env_from_template():
            logger.error("‚ùå Failed to create .env file")
            return False

    # Step 3: Validate environment
    if validate_environment():
        logger.info("\nüéâ Environment setup completed successfully!")
        logger.info("\nüìã Next Steps:")
        logger.info("1. Your .env file is configured and secure")
        logger.info("2. Run: python scripts/check_and_populate_database.py")
        logger.info("3. Test the financial exploration system")
        return True
    else:
        logger.error("‚ùå Environment setup failed")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
