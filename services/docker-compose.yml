# InvestByYourself Microservices Docker Compose
# Tech-020: Microservices Foundation

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: investbyyourself-postgres
    environment:
      POSTGRES_DB: investbyyourself
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/migrations:/docker-entrypoint-initdb.d/migrations
    ports:
      - "5432:5432"
    networks:
      - investbyyourself-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d investbyyourself"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: investbyyourself-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - investbyyourself-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: investbyyourself-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_DOMAIN: localhost
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    networks:
      - investbyyourself-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # ETL Service
  etl-service:
    build:
      context: ./etl-service
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: investbyyourself-etl
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=investbyyourself
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MINIO_HOST=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - ETL_BATCH_SIZE=${ETL_BATCH_SIZE:-100}
      - ETL_RETRY_ATTEMPTS=${ETL_RETRY_ATTEMPTS:-3}
    ports:
      - "8000:8000"
    volumes:
      - ./etl-service:/app
      - /app/__pycache__
      - /app/.pytest_cache
    networks:
      - investbyyourself-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Financial Analysis Service
  financial-analysis-service:
    build:
      context: ./financial-analysis-service
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: investbyyourself-financial-analysis
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=investbyyourself
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - ANALYSIS_CACHE_TTL=${ANALYSIS_CACHE_TTL:-3600}
      - ANALYSIS_MAX_WORKERS=${ANALYSIS_MAX_WORKERS:-4}
    ports:
      - "8001:8001"
    volumes:
      - ./financial-analysis-service:/app
      - /app/__pycache__
      - /app/.pytest_cache
    networks:
      - investbyyourself-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Data Service
  data-service:
    build:
      context: ./data-service
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: investbyyourself-data
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=investbyyourself
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MINIO_HOST=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - DB_POOL_SIZE=${DB_POOL_SIZE:-20}
      - DB_CONNECTION_TIMEOUT=${DB_CONNECTION_TIMEOUT:-30}
    ports:
      - "8002:8002"
    volumes:
      - ./data-service:/app
      - /app/__pycache__
      - /app/.pytest_cache
    networks:
      - investbyyourself-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8002/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # API Gateway (Future)
  api-gateway:
    image: nginx:alpine
    container_name: investbyyourself-api-gateway
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    networks:
      - investbyyourself-network
    depends_on:
      - etl-service
      - financial-analysis-service
      - data-service
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  investbyyourself-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
