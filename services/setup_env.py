#!/usr/bin/env python3
"""
Environment Setup Script for InvestByYourself Microservices
Creates a .env file with proper Redis configuration for microservices
"""

import os
import secrets
import string
from pathlib import Path


def generate_secure_password(length=16):
    """Generate a secure random password."""
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
    return "".join(secrets.choice(alphabet) for _ in range(length))


def create_env_file():
    """Create the .env file with proper configuration."""
    env_content = f"""# ======================================
# Microservices Environment Configuration
# ======================================
# Generated by setup_env.py
# NEVER commit this file to version control!

# ======================================
# BUILD & ENVIRONMENT
# ======================================
BUILD_TARGET=development
ENVIRONMENT=development
DEBUG=true

# ======================================
# DATABASE CONFIGURATION
# ======================================
# PostgreSQL Database
POSTGRES_PASSWORD={generate_secure_password(20)}
POSTGRES_USER=postgres
POSTGRES_DB=investbyyourself
POSTGRES_HOST=postgres
POSTGRES_PORT=5432

# ======================================
# REDIS CACHE CONFIGURATION
# ======================================
# Inside Docker (microservices talking to each other): REDIS_HOST=redis
# Outside Docker (local scripts, dev tools): REDIS_HOST=localhost
REDIS_PASSWORD={generate_secure_password(20)}
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_DB=0

# ======================================
# MINIO OBJECT STORAGE
# ======================================
MINIO_ROOT_USER=investbyyourself
MINIO_ROOT_PASSWORD={generate_secure_password(20)}
MINIO_HOST=minio
MINIO_PORT=9000
MINIO_CONSOLE_PORT=9001

# ======================================
# SERVICE CONFIGURATION
# ======================================
# ETL Service
ETL_BATCH_SIZE=100
ETL_MAX_WORKERS=4
ETL_RETRY_ATTEMPTS=3
ETL_RETRY_DELAY=5

# Financial Analysis Service
ANALYSIS_CACHE_TTL=3600
ANALYSIS_MAX_WORKERS=4

# Data Service
DB_POOL_SIZE=20
DB_CONNECTION_TIMEOUT=30

# ======================================
# API KEYS (External Services)
# ======================================
# Alpha Vantage API Key
ALPHA_VANTAGE_API_KEY=your_alpha_vantage_api_key_here

# Financial Modeling Prep API Key
FMP_API_KEY=your_fmp_api_key_here

# FRED API Key
FRED_API_KEY=your_fred_api_key_here

# Yahoo Finance (no API key required, but rate limiting applies)
YAHOO_FINANCE_API_KEY=

# API Ninjas (optional)
API_NINJAS_API_KEY=your_api_ninjas_key_here

# ======================================
# MONITORING & LOGGING
# ======================================
LOG_LEVEL=INFO
METRICS_ENABLED=true
ALERT_EMAIL=alerts@investbyyourself.com

# ======================================
# SECURITY CONFIGURATION
# ======================================
# JWT Secret Key (change in production!)
JWT_SECRET_KEY={generate_secure_password(32)}
JWT_ALGORITHM=HS256
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30

# CORS Configuration
CORS_ORIGINS=["http://localhost:3000", "http://localhost:8001", "http://localhost:8002"]

# ======================================
# DEVELOPMENT TOOLS
# ======================================
# PgAdmin Password
PGADMIN_DEFAULT_PASSWORD={generate_secure_password(20)}

# Grafana Admin Password
GF_SECURITY_ADMIN_PASSWORD={generate_secure_password(20)}

# ======================================
# IMPORTANT NOTES:
# ======================================
# 1. REDIS_HOST=redis is correct for microservices inside Docker
# 2. REDIS_HOST=localhost would be used for local development outside Docker
# 3. All passwords are automatically generated - KEEP THEM SECURE!
# 4. API keys need to be filled in with your actual keys
# 5. This file should NEVER be committed to version control
# 6. Use proper secret management in production environments
"""

    return env_content


def main():
    """Main function to set up the environment."""
    print("üöÄ InvestByYourself Microservices Environment Setup")
    print("=" * 60)

    # Check if we're in the services directory
    current_dir = Path.cwd()
    if not (current_dir / "docker-compose.yml").exists():
        print("‚ùå Error: Please run this script from the services directory")
        print("   Current directory:", current_dir)
        print("   Expected: services/ directory with docker-compose.yml")
        return

    env_file = current_dir / ".env"

    if env_file.exists():
        print(f"‚ö†Ô∏è  .env file already exists at: {env_file}")
        response = input("Do you want to overwrite it? (y/N): ").strip().lower()
        if response != "y":
            print("Setup cancelled.")
            return

    # Create the .env file
    try:
        env_content = create_env_file()

        with open(env_file, "w") as f:
            f.write(env_content)

        print(f"‚úÖ .env file created successfully at: {env_file}")
        print("\nüîë Generated secure passwords for all services")
        print("üìù Please review and customize the file as needed")
        print("‚ö†Ô∏è  IMPORTANT: Never commit this file to version control!")

        print("\nüöÄ Next steps:")
        print("1. Review the .env file and update API keys")
        print(
            "2. Start Redis and other services: docker-compose up -d redis postgres minio"
        )
        print(
            "3. Start your microservices: docker-compose up -d financial-analysis-service"
        )
        print(
            "4. Test Redis connection: docker exec -it investbyyourself-redis redis-cli"
        )

    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")
        return


if __name__ == "__main__":
    main()
